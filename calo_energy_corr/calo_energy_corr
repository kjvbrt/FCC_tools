#!/usr/bin/env python
import yaml
from argparse import ArgumentParser
from sys import exit
from os import path
from utils import plot, count_bins_with_error


def main():
    '''
    Calculate upstream correction parameters P00, P01, P10, P11.
    '''

    parser = ArgumentParser(description='Yay, calculate upstream parameters!')
    parser.add_argument('-n', '--hist-name', type=str,
                        help='Histogram base name')
    parser.add_argument('-u', '--upstream-corr', action='store_true',
                        default=False, help='Calculate upstream correction')
    parser.add_argument('-d', '--downstream-corr', action='store_true',
                        default=False, help='Calculate downstream correction')
    parser.add_argument('-l', '--layer-id', type=int,
                        help='ID of the first calorimeter layer')
    parser.add_argument('--note', action='append', default=[],
                        type=str, help='Note to be displayed in the plot')
    parser.add_argument('--rebin-factor', action='append', type=int,
                        default=[],
                        help='Number of bins to be merged')
    parser.add_argument('--rebin-index', action='append', type=int,
                        default=[],
                        help='Index of the input histogram to be rebined')
    parser.add_argument('-t', '--theta', action='store_true', default=False,
                        help='Running over theta points')

    required_arguments = parser.add_argument_group('required arguments')
    required_arguments.add_argument('-i', '--input-file',
                                    type=str, required=True,
                                    help='Input file path')
    args = parser.parse_args()

    if args.upstream_corr == args.downstream_corr:
        print('ERROR: Correction type not selected!')
        print('       Options: -u, --upstream_corr')
        print('                -d, --downstream_corr')
        exit(1)

    if args.rebin_index and len(args.rebin_factor) != len(args.rebin_index):
        print("ERROR: Rebin indexes and factors does not match")

    if not args.layer_id:
        if args.upstream_corr:
            args.layer_id = 0
        else:
            args.layer_id = 7

    if not args.hist_name:
        if args.upstream_corr:
            args.hist_name = 'upstreamEnergy_presamplerEnergy_'
        else:
            args.hist_name = 'downstreamEnergy_energyInLayer_'

    try:
        with open(args.input_file) as file:
            input_dict = yaml.full_load(file)
    except FileNotFoundError:
        print("ERROR: Input YAML file not found!")
        exit(1)

    from ROOT import TGraphErrors, TFile, TF1

    graph_p0 = TGraphErrors()
    graph_p0.SetName('graph_p0')
    graph_p1 = TGraphErrors()
    graph_p1.SetName('graph_p1')
    graph_chi2 = TGraphErrors()
    graph_chi2.SetName('graph_chi2')

    if args.theta:
        graph_p0.SetTitle(';#theta [deg];P_{0}')
        graph_p1.SetTitle(';#theta [deg];P_{1}')
        graph_chi2.SetTitle(';#theta [deg];#Chi^{2}/NDF')
    else:
        graph_p0.SetTitle(';E_{cluster} [GeV];P_{0}')
        graph_p1.SetTitle(';E_{cluster} [GeV];P_{1}')
        graph_chi2.SetTitle(';E_{cluster} [GeV];#Chi^{2}/NDF')

    for file_index, file_dict in enumerate(input_dict["files"]):
        try:
            file_path = file_dict["path"]
        except KeyError:
            print("WARNING: File path not found!")
            print("         file index: ", file_index)
            exit(1)
        try:
            file_energy = file_dict["energy"]
        except KeyError:
            print("WARNING: File energy not found!")
            print("         file index: ", file_index)
            exit(1)
        try:
            file_theta = file_dict["theta"]
        except KeyError:
            print("WARNING: File theta not found!")
            print("         file index: ", file_index)
            exit(1)

        if not path.isfile(file_path):
            print("WARNING: Input ROOT file not found!")
            print("         " + file_path)
            exit(1)

        print('INFO: Fitting file: ' + file_path)
        print('      file energy: %i GeV' % int(file_energy))
        print('      file theta: %i deg' % int(file_theta))

        infile = TFile(file_path, "READ")
        hist = infile.Get(args.hist_name + str(args.layer_id))
        try:
            hist.SetDirectory(0)
        except AttributeError:
            print('WARNING: Histogram not found!')
            print('         file path:', file_path)
            print('         histogram name:',
                  args.hist_name + str(args.layer_id))
            exit(1)
        infile.Close()

        hist.SetTitle('')

        if file_index in args.rebin_index:
            hist.Rebin(args.rebin_factor[args.rebin_index.index(file_index)])

        if args.upstream_corr:
            plotname = 'upstream_vs_layer'
        else:
            plotname = 'downstream_vs_layer'
        plotname += '_%i_%ideg_%iGeV' % (args.layer_id,
                                         int(file_theta),
                                         int(file_energy))

        plot(hist, 'hist_' + plotname, args.note)

        profile = hist.ProfileX('profile_x')
        profile.GetYaxis().SetTitle('Mean ' + hist.GetYaxis().GetTitle())

        if count_bins_with_error(profile) < 3:
            print('WARNING: Number of non empty bins too small, ' +
                  'ignoring histogram!')
            continue

        # func_from = hist.GetXaxis().GetBinLowEdge(hist.GetXaxis().GetFirst() + 5)
        # func_to = hist.GetXaxis().GetBinUpEdge(hist.GetXaxis().GetLast() - 10)
        func_from = hist.GetXaxis().GetBinLowEdge(hist.GetXaxis().GetFirst())
        func_to = hist.GetXaxis().GetBinUpEdge(hist.GetXaxis().GetLast())
        func = TF1('func', 'pol2', func_from, func_to)

        result = profile.Fit(func, 'SR')

        plot(profile, 'profile_' + plotname, args.note)

        if args.theta:
            graph_p0.SetPoint(file_index, file_theta,
                              result.Get().Parameter(0))
            graph_p0.SetPointError(file_index, 0., result.Get().Error(0))

            graph_p1.SetPoint(file_index, file_theta,
                              result.Get().Parameter(1))
            graph_p1.SetPointError(file_index, 0., result.Get().Error(1))

            graph_chi2.SetPoint(file_index, file_theta,
                                result.Get().Chi2() / result.Get().Ndf())
            graph_chi2.SetPointError(file_index, 0., 0.)
        else:
            graph_p0.SetPoint(file_index, file_energy,
                              result.Get().Parameter(0))
            graph_p0.SetPointError(file_index, 0., result.Get().Error(0))

            graph_p1.SetPoint(file_index, file_energy,
                              result.Get().Parameter(1))
            graph_p1.SetPointError(file_index, 0., result.Get().Error(1))

            graph_chi2.SetPoint(file_index, file_energy,
                                result.Get().Chi2() / result.Get().Ndf())
            graph_chi2.SetPointError(file_index, 0., 0.)

    if (graph_p0.GetN() < 3):
        print('WARNING: Number of energy values too small, ignoring final ' +
              'plots!')
        exit(0)
    if (graph_p1.GetN() < 3):
        print('WARNING: Number of energy values too small, ignoring final ' +
              'plots!')
        exit(0)

    plotname = 'graph'
    if args.upstream_corr:
        plotname += '_upstream_corr'
    else:
        plotname += '_downstream_corr'

    if args.theta:
        plot(graph_p0, plotname + '_theta_param0', args.note)
        plot(graph_p1, plotname + '_theta_param1', args.note)
        plot(graph_chi2, plotname + '_theta_chi2', args.note)

    else:
        func_p0 = TF1("func_p0", "pol1",
                      graph_p0.GetPointX(0),
                      graph_p0.GetPointX(graph_p0.GetN() - 1))
        result_p0 = graph_p0.Fit(func_p0, "SR")

        # func_p1 = TF1("func_p1", "[0]+[1]/sqrt(x)",
        #               graph_p1.GetPointX(0),
        #               graph_p1.GetPointX(graph_p1.GetN() - 1))
        func_p1 = TF1("func_p1", "pol1",
                      graph_p1.GetPointX(0),
                      graph_p1.GetPointX(graph_p1.GetN() - 1))
        result_p1 = graph_p1.Fit(func_p1, 'SR')

        plot(graph_p0, plotname + '_momentum_param0', args.note)
        plot(graph_p1, plotname + '_momentum_param1', args.note)
        plot(graph_chi2, plotname + '_momentum_chi2', args.note)

        print('INFO: P0 parameters:')
        print('      P00 = %.3g' % result_p0.Get().Parameter(0) +
              ' +/- %.3g' % result_p0.Get().Error(0) +
              ' (%.2g%%)' % abs(100 * result_p0.Get().Error(0) /
                                result_p0.Get().Parameter(0)))
        print('      P01 = %.3g' % result_p0.Get().Parameter(1) +
              ' +/- %.3g' % result_p0.Get().Error(1) +
              ' (%.2g%%)' % abs(100 * result_p0.Get().Error(1) /
                                result_p0.Get().Parameter(1)))

        print('INFO: P1 parameters:')
        print('      P10 = %.3g' % result_p1.Get().Parameter(0) +
              ' +/- %.3g' % result_p1.Get().Error(0) +
              ' (%.2g%%)' % abs(100 * result_p1.Get().Error(0) /
                                result_p1.Get().Parameter(0)))
        print('      P11 = %.3g' % result_p1.Get().Parameter(1) +
              ' +/- %.3g' % result_p1.Get().Error(1) +
              ' (%.2g%%)' % abs(100 * result_p1.Get().Error(1) /
                                result_p1.Get().Parameter(1)))


if __name__ == '__main__':
    main()
