#!/usr/bin/env python
from argparse import ArgumentParser
from sys import exit


def main():
    '''
    Test showers
    '''

    parser = ArgumentParser(description='Yay, test shower!')
    parser.add_argument('-n', '--hist-name', type=str,
                        default='energyInLayers',
                        help='Histogram base name')
    parser.add_argument('-o', '--output-file', type=str,
                        default='test',
                        help='Output file name')

    required_arguments = parser.add_argument_group('required arguments')
    required_arguments.add_argument('-i', '--input-file',
                                    type=str, required=True,
                                    help='Input file path')
    args = parser.parse_args()

    from ROOT import TFile, TF1, TCanvas

    infile = TFile(args.input_file, "READ")
    hist = infile.Get(args.hist_name)
    try:
        hist.SetDirectory(0)
    except AttributeError:
        print('WARNING: Histogram not found!')
        print('         file path:', args.input_file)
        print('         histogram name:', args.hist_name)
        exit(1)
    infile.Close()

    func = TF1('func', '[0]*x**[1]*exp(-[2]*x)', 0, 30)
    result = hist.Fit(func, 'SR')
    result.Print()

    canvas = TCanvas('canvas', 'Canvas', 350, 350)
    hist.Draw()
    canvas.Print(args.output_file + '.pdf')

    nEntries = hist.GetEntries() / 8.
    print('INFO: Histogram integral from 1 to 8: %.3f GeV' %
          (hist.Integral(1, 8) / nEntries))
    print('INFO: Function integral from 0 to 8: %.3f GeV' %
          (func.Integral(0., 8.) / nEntries))
    print('INFO: Function integral from 8 to 30: %.3f GeV' %
          (func.Integral(8., 30.) / nEntries))
    print('INFO: Function integral from 0 to 30: %.3f GeV' %
          (func.Integral(0., 30.) / nEntries))


if __name__ == '__main__':
    main()
